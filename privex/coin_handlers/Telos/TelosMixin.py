"""
**Copyright**::

    +===================================================+
    |                 © 2019 Privex Inc.                |
    |               https://www.privex.io               |
    +===================================================+
    |                                                   |
    |        CryptoToken Converter                      |
    |                                                   |
    |        Core Developer(s):                         |
    |                                                   |
    |          (+)  Chris (@someguy123) [Privex]        |
    |                                                   |
    +===================================================+

"""
import logging
from typing import Dict, Any, List

from privex.coin_handlers.base import SettingsMixin
from telospy.api import API

from privex.coin_handlers.base.exceptions import TokenNotFound, MissingTokenMetadata
from privex.coin_handlers.base.objects import Coin
from privex.helpers import empty

log = logging.getLogger(__name__)


class TelosMixin(SettingsMixin):
    """
    TelosMixin - A child class of SettingsMixin that is used by both TelosLoader and TelosManager for shared
    functionality.

    Main features::

     - Access the Telos shared instance via :py:attr:`.telos`
     - Get the general ``Telos`` symbol coin settings via :py:attr:`.telos_settings`
     - Access individual token settings (e.g. contract) via ``self.settings[symbol]``
     - Helper method :py:meth:`.get_contract` - get contract via DB, or fall back to :py:attr:`.default_contracts`
     - Automatically sets setting defaults, such as the RPC node (using Greymass node over SSL)

    **Copyright**::

        +===================================================+
        |                 © 2019 Privex Inc.                |
        |               https://www.privex.io               |
        +===================================================+
        |                                                   |
        |        CryptoToken Converter                      |
        |                                                   |
        |        Core Developer(s):                         |
        |                                                   |
        |          (+)  Chris (@someguy123) [Privex]        |
        |                                                   |
        +===================================================+

    """
    
    setting_defaults = dict(
        host='eos.greymass.com', username=None, password=None, endpoint='/', port=443, ssl=True, precision=4
    )  # type: Dict[str, Any]
    """Default settings to use if any required values are empty, e.g. default to Greymass's RPC node"""
    
    provides = ['TELOS']  # type: List[str]
    """
    This attribute is automatically generated by scanning for :class:`models.Coin` s with the type ``eos``.
    This saves us from hard coding specific coin symbols. See __init__.py for populating code.
    """
    
    default_contracts = {
        'EOS': 'eosio.token'
    }  # type: Dict[str, str]
    """
    To make it easier to add common tokens on the EOS network, the loader/manager will fallback to this map between
    symbols and contracts.

    This means that you don't have to set the contract in the custom JSON for popular tokens in this list, such as
    the native EOS token (which uses the contract account eosio.token).
    """
    
    _telos = None  # type: Cleos
    """Shared instance of :py:class:`eospy.cleos.Cleos` used across both the loader/manager."""
    
    @property
    def all_coins(self) -> Dict[str, Coin]:
        """
        Ensures that the coin 'EOS' always has it's settings loaded by :py:class:`base.SettingsMixin` by overriding
        this method ``all_coins`` to inject the coin EOS if it's not our symbol.

        :return dict coins: A dict<str,Coin> of supported coins, mapped by symbol
        """
        c = {}
        if hasattr(self, 'coins'):
            c = dict(self.coins)
        elif hasattr(self, 'coin'):
            c = {self.coin.symbol_id: self.coin}
        else:
            raise Exception('Cannot load settings as neither self.coin nor self.coins exists...')
        
        if 'EOS' not in c:
            try:
                c['EOS'] = Coin.objects.get(symbol='EOS', coin_type='eos')
            except Coin.DoesNotExist:
                log.warning('EOSMixin cannot find a coin with the symbol "EOS" and type "eos"...')
                log.warning('Checking for a coin with native symbol_id "EOS" and type "eos"...')
                c['EOS'] = Coin.objects.get(symbol_id='EOS', coin_type='eos')
            return c
        return c
    
    @property
    def settings(self) -> Dict[str, dict]:
        """
        Get all settings, mapped by coin symbol (each coin symbol dict contains custom json settings merged)

        :return dict settings: A dictionary mapping coin symbols to settings
        """
        if len(self._settings) > 0:
            return self._settings
        return self._prep_settings()
    
    @property
    def eos_settings(self) -> Dict[str, Any]:
        """
        Since EOS deals with tokens under one network, this is a helper property to quickly get the base EOS settings

        :return dict settings: A map of setting keys to their values
        """
        return super(TelosMixin, self).settings.get('EOS', self.setting_defaults)
    
    @property
    def telos(self) -> API:
        """Returns an instance of Cleos and caches it in the attribute _telos after creation"""
        if not self._telos:
            log.debug(f'Creating Cleos instance using EOS API node: {self.url}')
            self._telos = API()
        return self._telos
    
    @property
    def url(self) -> str:
        """Creates a URL from the host settings on the EOS coin"""
        s = self.eos_settings
        
        url = s['endpoint']
        proto = 'https' if s['ssl'] else 'http'
        host = '{}:{}'.format(s['host'], s['port'])
        
        if s['username'] is not None:
            host = '{}:{}@{}:{}'.format(s['username'], s['password'], s['host'], s['port'])
        
        url = url[1:] if len(url) > 0 and url[0] == '/' else url  # Strip starting / of URL
        url = "{}://{}/{}".format(proto, host, url)
        # Cleos doesn't like ending slashes, so make sure to remove any ending slashes...
        url = url[:-1] if url[-1] == '/' else url
        
        return url
    
    def get_contract(self, symbol: str) -> str:
        """
        Attempt to find the contract account for a given token symbol, searches the database Coin objects first
        using :py:attr:`.settings` - if not found, falls back to :py:attr:`.default_contracts`

        Example usage::

            >>> contract_acc = self.get_contract('EOS')
            >>> print(contract_acc)
             eosio.token


        :param str symbol:              The token symbol to find the contract for, e.g. ``EOS``
        :raises TokenNotFound:          The given ``symbol`` does not exist in self.settings
        :raises MissingTokenMetadata:   Could not find contract in DB coin settings nor default_contracts
        :return str contract_acc:       The contract username as a string, e.g. ``eosio.token``
        """
        
        symbol = symbol.upper()
        log.debug(f'Attempting to find EOS contract for "{symbol}" in DB Coin settings')
        
        try:
            contract = self.settings[symbol].get('contract')
            if not empty(contract):
                return contract
        except AttributeError:
            raise TokenNotFound(f'The coin "{symbol}" was not found in {__name__}.settings')
        
        log.debug(f'No contract found in DB settings for "{symbol}", checking if we have a default...')
        try:
            contract = self.default_contracts[symbol]
            
            if empty(contract):
                raise MissingTokenMetadata
            
            log.debug(f'Found contract for "{symbol}" in default_contracts, returning "{contract}"')
            return contract
        except (AttributeError, MissingTokenMetadata):
            log.error(f'Failed to find a contract for "{symbol}" in Coin objects nor default_contracts...')
            raise MissingTokenMetadata(f"Couldn't find '{symbol}' contract in DB coin settings or default_contracts.")
